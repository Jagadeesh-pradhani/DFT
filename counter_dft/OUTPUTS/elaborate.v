
// Generated by Cadence Genus(TM) Synthesis Solution 21.14-s082_1
// Generated on: Feb 19 2025 02:30:32 EST (Feb 19 2025 07:30:32 UTC)

// Verification Directory fv/counter 

module add_unsigned(A, B, Z);
  input [3:0] A;
  input B;
  output [3:0] Z;
  wire [3:0] A;
  wire B;
  wire [3:0] Z;
  wire n_10, n_14, n_17, n_19, n_23, n_24, n_26, n_30;
  wire n_35;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_10, A[0], B);
  nand g13 (n_17, n_14, A[1]);
  nand g20 (n_26, n_24, A[2]);
  xnor g25 (Z[1], n_14, n_30);
  xnor g27 (Z[2], n_24, n_23);
  xnor g30 (Z[3], n_35, n_19);
  not g33 (n_23, A[2]);
  not g34 (n_19, A[3]);
  not g35 (n_14, n_10);
  not g36 (n_30, A[1]);
  not g37 (n_24, n_17);
  not g38 (n_35, n_26);
endmodule

module counter(clk, reset, enable, count);
  input clk, reset, enable;
  output [3:0] count;
  wire clk, reset, enable;
  wire [3:0] count;
  wire n_8, n_9, n_10, n_11;
  add_unsigned add_14_24(.A (count), .B (1'b1), .Z ({n_11, n_10, n_9,
       n_8}));
  CDN_flop \count_reg[0] (.clk (clk), .d (n_8), .sena (enable), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (count[0]));
  CDN_flop \count_reg[1] (.clk (clk), .d (n_9), .sena (enable), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (count[1]));
  CDN_flop \count_reg[2] (.clk (clk), .d (n_10), .sena (enable), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (count[2]));
  CDN_flop \count_reg[3] (.clk (clk), .d (n_11), .sena (enable), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (count[3]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
