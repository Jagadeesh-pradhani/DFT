
// Generated by Cadence Genus(TM) Synthesis Solution 21.14-s082_1
// Generated on: Feb 14 2025 16:37:46 IST (Feb 14 2025 11:07:46 UTC)

// Verification Directory fv/mcrb 

module add_unsigned(A, B, Z);
  input [4:0] A;
  input B;
  output [4:0] Z;
  wire [4:0] A;
  wire B;
  wire [4:0] Z;
  wire n_12, n_16, n_19, n_21, n_25, n_26, n_28, n_29;
  wire n_31, n_33, n_37, n_42, n_45;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_12, A[0], B);
  nand g15 (n_19, n_16, A[1]);
  nor g20 (n_29, n_25, n_21);
  nand g22 (n_28, n_26, A[2]);
  nand g24 (n_31, n_29, n_26);
  xnor g30 (Z[1], n_16, n_37);
  xnor g32 (Z[2], n_26, n_25);
  xnor g35 (Z[3], n_42, n_21);
  xnor g37 (Z[4], n_33, n_45);
  not g40 (n_25, A[2]);
  not g41 (n_21, A[3]);
  not g43 (n_16, n_12);
  not g44 (n_37, A[1]);
  not g45 (n_45, A[4]);
  not g46 (n_26, n_19);
  not g47 (n_42, n_28);
  not g48 (n_33, n_31);
endmodule

module geq_unsigned(A, B, Z);
  input [4:0] A;
  input B;
  output Z;
  wire [4:0] A;
  wire B;
  wire Z;
  wire n_15, n_17, n_18, n_25, n_28, n_29, n_30, n_32;
  wire n_34, n_35;
  nand g4 (n_15, n_25, B);
  nand g15 (n_28, n_17, n_18);
  nor g18 (n_30, A[2], A[3]);
  nand g24 (n_32, n_30, n_29);
  nand g27 (Z, n_34, n_35);
  not g38 (n_25, A[0]);
  not g40 (n_17, A[1]);
  not g43 (n_34, A[4]);
  not g45 (n_18, n_15);
  not g46 (n_29, n_28);
  not g47 (n_35, n_32);
endmodule

module leq_unsigned(A, B, Z);
  input [4:0] A, B;
  output Z;
  wire [4:0] A, B;
  wire Z;
  wire n_18, n_19, n_20, n_21, n_25, n_27, n_28, n_29;
  wire n_30, n_31, n_32, n_33, n_34, n_35, n_36, n_37;
  wire n_38, n_41, n_42, n_43, n_44, n_45, n_46, n_47;
  wire n_48;
  not g3 (n_18, A[4]);
  not g4 (n_19, A[3]);
  not g5 (n_20, A[2]);
  not g6 (n_21, A[1]);
  nand g9 (n_28, n_25, A[0]);
  nor g10 (n_27, B[1], n_21);
  nand g11 (n_30, B[1], n_21);
  nor g12 (n_37, B[2], n_20);
  nand g13 (n_32, B[2], n_20);
  nor g14 (n_33, B[3], n_19);
  nand g15 (n_34, B[3], n_19);
  nor g16 (n_44, B[4], n_18);
  nand g17 (n_47, B[4], n_18);
  not g18 (n_29, n_27);
  nand g19 (n_31, n_28, n_29);
  nand g20 (n_38, n_30, n_31);
  nor g21 (n_35, n_32, n_33);
  not g22 (n_36, n_34);
  nor g23 (n_42, n_35, n_36);
  nor g24 (n_41, n_37, n_33);
  nand g28 (n_43, n_41, n_38);
  nand g29 (n_45, n_42, n_43);
  not g30 (n_46, n_44);
  nand g31 (n_48, n_45, n_46);
  nand g32 (Z, n_47, n_48);
  not g42 (n_25, B[0]);
endmodule

module bmux_1(ctl, in_0, in_1, z);
  input ctl;
  input [4:0] in_0, in_1;
  output [4:0] z;
  wire ctl;
  wire [4:0] in_0, in_1;
  wire [4:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mcrb(mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, skew_addr_cntr_o,
     mc_rb_fuse_vld_i, mc_rb_ef1_sclk_i);
  input mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, mc_rb_fuse_vld_i,
       mc_rb_ef1_sclk_i;
  output [4:0] skew_addr_cntr_o;
  wire mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, mc_rb_fuse_vld_i,
       mc_rb_ef1_sclk_i;
  wire [4:0] skew_addr_cntr_o;
  wire fuse_capture, mc_rb_fuse_vld_q, n_19, n_21, n_22, n_23, n_24,
       n_25;
  wire n_26, n_27, n_28, n_29, n_30, n_31, n_32, n_33;
  wire n_34, n_35, n_36, n_37, n_39, skew_write_incr;
  add_unsigned add_21_40(.A (skew_addr_cntr_o), .B (1'b1), .Z ({n_25,
       n_24, n_23, n_22, n_21}));
  geq_unsigned gte_13_46(.A (skew_addr_cntr_o), .B (1'b1), .Z (n_36));
  leq_unsigned lte_13_77(.A (skew_addr_cntr_o), .B (5'b10011), .Z
       (n_37));
  bmux_1 mux_skew_addr_cntr_22_14(.ctl (skew_write_incr), .in_0 (5'b0),
       .in_1 ({n_25, n_24, n_23, n_22, n_21}), .z ({n_30, n_29, n_28,
       n_27, n_26}));
  bmux_1 mux_skew_addr_cntr_20_14(.ctl (fuse_capture), .in_0 ({n_30,
       n_29, n_28, n_27, n_26}), .in_1 ({n_25, n_24, n_23, n_22,
       n_21}), .z ({n_35, n_34, n_33, n_32, n_31}));
  and g1 (skew_write_incr, n_36, n_37);
  not g2 (n_39, mc_rb_ef1_svld_i);
  and g3 (fuse_capture, n_39, mc_rb_fuse_vld_q);
  not g4 (n_19, gctl_rclk_orst_n_i);
  CDN_flop \skew_addr_cntr_reg[0] (.clk (mc_rb_ef1_sclk_i), .d (n_31),
       .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (skew_addr_cntr_o[0]));
  CDN_flop \skew_addr_cntr_reg[1] (.clk (mc_rb_ef1_sclk_i), .d (n_32),
       .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (skew_addr_cntr_o[1]));
  CDN_flop \skew_addr_cntr_reg[2] (.clk (mc_rb_ef1_sclk_i), .d (n_33),
       .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (skew_addr_cntr_o[2]));
  CDN_flop \skew_addr_cntr_reg[3] (.clk (mc_rb_ef1_sclk_i), .d (n_34),
       .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (skew_addr_cntr_o[3]));
  CDN_flop \skew_addr_cntr_reg[4] (.clk (mc_rb_ef1_sclk_i), .d (n_35),
       .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (skew_addr_cntr_o[4]));
  CDN_flop mc_rb_fuse_vld_q_reg(.clk (mc_rb_ef1_sclk_i), .d
       (mc_rb_fuse_vld_i), .sena (1'b1), .aclr (n_19), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (mc_rb_fuse_vld_q));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
