
// Generated by Cadence Genus(TM) Synthesis Solution 21.14-s082_1
// Generated on: Feb 14 2025 15:53:28 IST (Feb 14 2025 10:23:28 UTC)

// Verification Directory fv/mcrb 

module mcrb(mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, skew_addr_cntr_o,
     mc_rb_fuse_vld_i, mc_rb_ef1_sclk_i);
  input mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, mc_rb_fuse_vld_i,
       mc_rb_ef1_sclk_i;
  output [4:0] skew_addr_cntr_o;
  wire mc_rb_ef1_svld_i, gctl_rclk_orst_n_i, mc_rb_fuse_vld_i,
       mc_rb_ef1_sclk_i;
  wire [4:0] skew_addr_cntr_o;
  wire mc_rb_fuse_vld_q, n_19, n_25, n_94, n_131, n_148, n_159, n_160;
  wire n_161, n_162, n_163, n_164, n_165, n_173, n_183, n_184;
  wire n_185, n_186, n_189, n_196, n_197, n_198, n_1564, n_1566;
  wire n_1567, n_3371, n_3372, n_3373, n_3374, n_3375, n_3376, n_3377;
  wire n_3378, n_3379, n_3380, n_3381, n_3382, n_3383;
  not g4 (n_19, gctl_rclk_orst_n_i);
  or g220 (n_164, skew_addr_cntr_o[2], skew_addr_cntr_o[3]);
  or g222 (n_165, wc, mc_rb_ef1_svld_i);
  not gc (wc, mc_rb_fuse_vld_q);
  or g5322 (n_94, wc0, n_186);
  not gc0 (wc0, n_185);
  nand g5323 (n_186, n_184, n_131);
  or g5324 (n_131, n_198, n_173);
  nand g5325 (n_3376, skew_addr_cntr_o[4], n_148);
  or g5326 (n_3377, skew_addr_cntr_o[4], n_148);
  nand g5327 (n_159, n_3376, n_3377);
  nand g5328 (n_3378, n_162, skew_addr_cntr_o[3]);
  or g5329 (n_3379, n_162, skew_addr_cntr_o[3]);
  nand g5330 (n_163, n_3378, n_3379);
  or g5331 (n_185, n_1566, n_1567);
  or g5332 (n_184, wc1, n_183);
  not gc1 (wc1, n_165);
  or g5333 (n_198, n_196, n_197);
  or g5334 (n_3380, n_25, skew_addr_cntr_o[2]);
  nand g5335 (n_3381, n_25, skew_addr_cntr_o[2]);
  nand g5336 (n_160, n_3380, n_3381);
  or g5337 (n_148, n_189, n_25);
  or g5338 (n_1567, n_173, mc_rb_fuse_vld_q);
  nand g5339 (n_183, skew_addr_cntr_o[4], n_164);
  or g5340 (n_162, n_25, wc2);
  not gc2 (wc2, skew_addr_cntr_o[2]);
  or g5341 (n_1566, skew_addr_cntr_o[2], n_1564);
  or g5342 (n_197, skew_addr_cntr_o[4], skew_addr_cntr_o[2]);
  or g5343 (n_196, wc3, skew_addr_cntr_o[1]);
  not gc3 (wc3, mc_rb_ef1_svld_i);
  or g5344 (n_3382, wc4, skew_addr_cntr_o[1]);
  not gc4 (wc4, skew_addr_cntr_o[0]);
  or g5345 (n_3383, skew_addr_cntr_o[0], wc5);
  not gc5 (wc5, skew_addr_cntr_o[1]);
  nand g5346 (n_161, n_3382, n_3383);
  or g5347 (n_173, skew_addr_cntr_o[0], skew_addr_cntr_o[3]);
  nand g5348 (n_189, skew_addr_cntr_o[3], skew_addr_cntr_o[2]);
  or g5349 (n_1564, skew_addr_cntr_o[4], skew_addr_cntr_o[1]);
  nand g5350 (n_25, skew_addr_cntr_o[1], skew_addr_cntr_o[0]);
  and g5351 (n_3371, n_159, wc6);
  not gc6 (wc6, n_94);
  and g5352 (n_3372, n_160, wc7);
  not gc7 (wc7, n_94);
  and g5353 (n_3373, n_163, wc8);
  not gc8 (wc8, n_94);
  and g5354 (n_3374, n_161, wc9);
  not gc9 (wc9, n_94);
  nor g5355 (n_3375, n_94, skew_addr_cntr_o[0]);
  CDN_flop mc_rb_fuse_vld_q_reg(.clk (mc_rb_ef1_sclk_i), .d
       (mc_rb_fuse_vld_i), .sena (1'b1), .aclr (n_19), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (mc_rb_fuse_vld_q));
  CDN_flop \skew_addr_cntr_reg[0] (.clk (mc_rb_ef1_sclk_i), .d
       (n_3375), .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0),
       .srd (1'b0), .q (skew_addr_cntr_o[0]));
  CDN_flop \skew_addr_cntr_reg[1] (.clk (mc_rb_ef1_sclk_i), .d
       (n_3374), .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0),
       .srd (1'b0), .q (skew_addr_cntr_o[1]));
  CDN_flop \skew_addr_cntr_reg[2] (.clk (mc_rb_ef1_sclk_i), .d
       (n_3372), .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0),
       .srd (1'b0), .q (skew_addr_cntr_o[2]));
  CDN_flop \skew_addr_cntr_reg[3] (.clk (mc_rb_ef1_sclk_i), .d
       (n_3373), .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0),
       .srd (1'b0), .q (skew_addr_cntr_o[3]));
  CDN_flop \skew_addr_cntr_reg[4] (.clk (mc_rb_ef1_sclk_i), .d
       (n_3371), .sena (1'b1), .aclr (n_19), .apre (1'b0), .srl (1'b0),
       .srd (1'b0), .q (skew_addr_cntr_o[4]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
